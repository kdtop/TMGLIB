TMGOOW2 ;TMG/kst/OO GENERIC OBJECT ;11/28/24
         ;;1.0;TMG-LIB;**1**;11/28/24
  ;
  ;"=======================================================================
  ;" API -- Public Functions.
  ;"=======================================================================
  ;"NOTE: @REF  (e.g. @OBJREF, @PARENTREF) format: 
  ;"       @REF@("TYPE")="OBJECT"
  ;"       @REF@("COLORS") -- ARRAY WITH COLORS. Format:
  ;"           @REF@("COLORS","NORM")='CLRVEC24;CLRVEC24'
  ;"       @REF@("SCRN WIDTH")= OPTIONAL screen width. (default is terminal width)
  ;"       @REF@("SCRN HEIGHT")= OPTIONAL screen height. (default is terminal height (IOSL) - 2)
  ;"       @REF@("PARENT")=<parent REF>
  ;"       @REF@("CHILDREN",#)=<child REF>
  ;"       @REF@("CHILDREN","HAS FOCUS")=<# of focused child>  
  ;"       @REF@("ON FREE")="HNDONFREE^TMGOOW2()"    
  ;"       @REF@("ON ADD CHILD")="HNDONADDCHILD^TMGOOW2(CHILDREF)"
  ;"       @REF@("ON MESSAGE")="HNDONMSG^TMGOOW2(MSGNAME,.DATA)"
  ;"       @REF@("ON KEY")="HNDONKEY^TMGOOW2(KEY)"
  ;"       @REF@("ON SET FOCUS")="HNDONFOCUS^TMGOOW2(OBJREF)"
  ;"       @REF@("ON DYN PROP SET: GENERIC")="HNDSETPROP(PROPNAME,.VALUE)
  ;"       @REF@("ON DYN PROP GET: GENERIC")="HNDGETPROP(PROPNAME,.OUT)
  ;"       @REF@("PROP","DRAW FOCUSED")=Automatically set, 1 if to draw as focused.    
  ;
  ;  
  ;"=======================================================================
  ;"PRIVATE API FUNCTIONS
  ;"=======================================================================
  ;
  ;"=======================================================================
  ;"=======================================================================
  ;
  ;"------GENERIC OBJECT STUFF -------------------------------------------------
  ;  
INITOBJTYPE(TYPEREF,SCRNW,SCRNH,BUFFREF) ;"GENERIC TYPE INITIATOR
  ;"NOTE: The data put into @TYPEREF will ultimately be copied into an INSTANCE,
  ;"      thus creating the actual object.  @TYPEREF is not the final object. 
  ;"-- Everything that will apply to ALL instances of this object should be put here.
  ;"-- Properties etc that will be unique to object should go into constructor code
  ;  
  SET @TYPEREF@("TYPE")="OBJECT"
  IF $GET(BUFFREF)'="" SET @TYPEREF@("BUFFERED")=BUFFREF
  ;
  ;"IF DEBUGGING, POSITION LOWER ON SCREEN
  NEW ZZDEBUG SET ZZDEBUG=1
  IF ZZDEBUG=1 DO     
  . ;"SET @TYPEREF@("DEBUG MODE")=1
  . SET @TYPEREF@("SCRN HEIGHT")=60
  . SET @TYPEREF@("SCRN WIDTH")=130
  ELSE  DO
  . SET @TYPEREF@("SCRN HEIGHT")=SCRNH-3  ;"Shrink from boundries to avoid any wrapping issues  
  . SET @TYPEREF@("SCRN WIDTH")=SCRNW-2   ;"Shrink from boundries to avoid any wrapping issues
  ;  
  SET @TYPEREF@("COLORS","NORM")=$$COLOR24PAIR^TMGUSRI8("Linen","SkyBlue",.TMPWCLR)
  SET @TYPEREF@("ON FREE")="HNDONFREE^TMGOOW2()"    
  SET @TYPEREF@("ON ADD CHILD")="HNDONADDCHILD^TMGOOW2(CHILDREF)"
  SET @TYPEREF@("ON MESSAGE")="HNDONMSG^TMGOOW2(MSGNAME,.DATA)"
  SET @TYPEREF@("ON KEY")="HNDONKEY^TMGOOW2(KEY)"
  SET @TYPEREF@("ON SET FOCUS")="HNDONFOCUS^TMGOOW2(OBJREF)"
  SET @TYPEREF@("ON UNFOCUS")="HNDONUNFOCUS^TMGOOW2()"
  SET @TYPEREF@("ON DYN PROP SET: GENERIC")="HNDSETPROP^TMGOOW2(PROPNAME,.VALUE)"
  SET @TYPEREF@("ON DYN PROP GET: GENERIC")="HNDGETPROP^TMGOOW2(PROPNAME,.OUT)"
  ;
  QUIT
  ;
NEWGENOBJ(OBJREF,PARENTREF,TYPEREF)  ;"New Generic object
  ;"INPUT:  OBJREF -- pass by REFERENCE -- A SOMETIMES-IN AND OUT PARAMETER.  VAR HOLDS REFERENCE NAME
  ;"        PARENTREF -- OPTIONAL -- name of object that will own this object
  ;"        TYPEREF -- PASSED BY NAME 
  ;"RESULTS: returns reference to object
  IF $GET(PARENTREF)="" DO
  . SET OBJREF=$GET(OBJREF) 
  . IF OBJREF="" SET OBJREF="TMGROOTOBJ"
  ELSE  DO
  . NEW IDX SET IDX=$ORDER(@PARENTREF@("CHILD INSTANCES","@"),-1)+1
  . SET OBJREF=$NAME(@PARENTREF@("CHILD INSTANCES",IDX))
  IF $GET(OBJREF)="" GOTO NODN
  MERGE @OBJREF=@TYPEREF
  SET @OBJREF@("PARENT")=$GET(PARENTREF)
  KILL @OBJREF@("CHILDREN")  
  DO SETPROP^TMGOOW2(OBJREF,"DRAW FOCUSED",0)  ;"Default to unfocused
  IF $$ACTION^TMGOOW2(PARENTREF,"ADD CHILD",OBJREF)  ;"ignore result.  May change DRAW FOCUSED property
  ;
NODN ;  
  QUIT OBJREF
  ; 
CHILDREF(SELFREF,IDX) ;
  IF $GET(SELFREF)="" QUIT ""
  QUIT $GET(@SELFREF@("CHILDREN",+$GET(IDX)))
  ;
FOCUSEDCHILD(SELFREF)  ;"Get focused child object (if any)
  NEW RESULT SET RESULT=""
  NEW FOCUSIDX SET FOCUSIDX=$GET(@SELFREF@("CHILDREN","HASFOCUS"))
  IF FOCUSIDX>0 SET RESULT=$GET(@SELFREF@("CHILDREN",FOCUSIDX))
  QUIT RESULT
  ;
CYCLEFOCUS(SELFREF) ;"Cycle focus amoung children
  NEW PRIORFOCUSIDX SET PRIORFOCUSIDX=$GET(@SELFREF@("CHILDREN","HASFOCUS"))
  NEW NEWFOCUSIDX SET NEWFOCUSIDX=+$ORDER(@SELFREF@("CHILDREN",PRIORFOCUSIDX))
  IF NEWFOCUSIDX'>0 SET NEWFOCUSIDX=+$ORDER(@SELFREF@("CHILDREN",0))  ;"Wrap from end of list to beginning
  IF NEWFOCUSIDX=PRIORFOCUSIDX QUIT  ;"would happen if only 1 child
  IF NEWFOCUSIDX'>0 QUIT 
  NEW REF SET REF=$$CHILDREF(SELFREF,NEWFOCUSIDX) QUIT:REF=""
  DO HNDONFOCUS(SELFREF,REF)
  QUIT
  ;
HNDONFOCUS(SELFREF,OBJREF) ;"Event Handler -- FOCUS
  NEW FOUND SET FOUND=0
  NEW PRIORFOCUSIDX SET PRIORFOCUSIDX=+$GET(@SELFREF@("CHILDREN","HASFOCUS"))
  NEW NEWFOCUSIDX SET NEWFOCUSIDX=0
  NEW CHILDIDX SET CHILDIDX=0
  FOR  SET CHILDIDX=$ORDER(@SELFREF@("CHILDREN",CHILDIDX)) QUIT:(CHILDIDX'>0)  DO
  . NEW CHILDREF SET CHILDREF=$GET(@SELFREF@("CHILDREN",CHILDIDX)) QUIT:CHILDREF=""
  . IF CHILDREF=OBJREF SET NEWFOCUSIDX=CHILDIDX
  IF NEWFOCUSIDX>0 DO
  . SET @SELFREF@("CHILDREN","HASFOCUS")=NEWFOCUSIDX,FOUND=1
  . DO SETPROP^TMGOOW2(OBJREF,"DRAW FOCUSED",1)
  . NEW PRIORREF SET PRIORREF=$$CHILDREF(SELFREF,PRIORFOCUSIDX) QUIT:PRIORREF=""
  . IF $$ACTION^TMGOOW2(PRIORREF,"UNFOCUS")
  IF (FOUND=1)!(OBJREF=SELFREF) DO
  . NEW PARENTREF SET PARENTREF=$GET(@SELFREF@("PARENT")) QUIT:PARENTREF=""
  . IF $$ACTION^TMGOOW2(PARENTREF,"FOCUS",SELFREF)
  QUIT
  ;
HNDONUNFOCUS(SELFREF) ;"Event Hanlder -- UNFOCUS
  DO SETPROP^TMGOOW2(SELFREF,"DRAW FOCUSED",0)
  NEW CHILDIDX SET CHILDIDX=0
  FOR  SET CHILDIDX=$ORDER(@SELFREF@("CHILDREN",CHILDIDX)) QUIT:CHILDIDX'>0  DO
  . NEW CHILDREF SET CHILDREF=$GET(@SELFREF@("CHILDREN",CHILDIDX)) QUIT:CHILDREF=""
  . IF $$ACTION^TMGOOW2(CHILDREF,"UNFOCUS")
  QUIT
  ;
HNDONMSG(SELFREF,MSGNAME,DATA)  ;"Event Handler -- MESSAGE
  IF MSGNAME="XYZ" DO  ;"place any messages handled by generic objects here...
  . ;"SOMETHING HERE...
  ELSE  DO
  . NEW FOCUSCHILDREF SET FOCUSCHILDREF=$$FOCUSEDCHILD(SELFREF)
  . IF FOCUSCHILDREF="" QUIT
  . IF $$ACTION^TMGOOW2(FOCUSCHILDREF,"MESSAGE",.DATA)  ;"ignore result
  QUIT
  ;
HNDONKEY(SELFREF,KEY)  ;"Event Handler -- KEY
  ;"Plan for descentant objects to override this.  
  IF KEY="TAB" DO  ;"place any KEY handling for this object
  . DO CYCLEFOCUS(SELFREF)
  ELSE  DO  ;"If self doesn't handle KEY event, then pass on to focused child.  
  . NEW FOCUSCHILDREF SET FOCUSCHILDREF=$$FOCUSEDCHILD(SELFREF)
  . IF FOCUSCHILDREF="" QUIT
  . IF $$ACTION^TMGOOW2(FOCUSCHILDREF,"KEY",KEY)  ;"ignore result
  QUIT
  ;
HNDONADDCHILD(SELFREF,AREF) ;"Event handler -- ADD CHILD
  ;"INPUT: SELFREF -- PASS BY NAME -- Added parameter from ACTION() function
  ;"       AREF -- PASSED BY NAME -- the child reference to add.
  NEW IDX SET IDX=$ORDER(@SELFREF@("CHILDREN","@"),-1)+1
  SET @SELFREF@("CHILDREN",IDX)=AREF
  IF $GET(@SELFREF@("CHILDREN","HASFOCUS"))'>0 DO
  . DO HNDONFOCUS(SELFREF,AREF)
  QUIT "1^OK"
  ;
HNDONFREE(SELFREF) ;"Event handler -- FREE
  ;"INPUT: SELFREF -- PASS BY NAME -- Added parameter from ACTION() function
  IF $GET(SELREF)="" QUIT
  NEW CHILDIDX SET CHILDIDX=0
  FOR  SET CHILDIDX=$ORDER(@SELFREF@("CHILDREN",CHILDIDX)) QUIT:CHILDIDX'>0  DO
  . NEW CHILDREF SET CHILDREF=$GET(@SELFREF@("CHILDREN",CHILDIDX)) QUIT:CHILDREF=""
  . IF $$ACTION^TMGOOW2(SELFREF,"FREE",CHILDREF)  ;"call FREE for reach child.  Ignore result
  . IF $GET(@SELFREF@("CHILDREN","HASFOCUS"))=CHILDIDX DO
  . . SET @SELFREF@("CHILDREN","HASFOCUS")=0
  KILL @SELFREF
  QUIT "1^OK"
  ;
HNDSETPROP(OBJREF,PROPNAME,VALUE)  ;"Set a property to VALUE
  ;"This is a generic SETTER.  Descendents can override for specific data types
  SET @OBJREF@("PROP",PROPNAME)=$GET(VALUE)
  QUIT "1^OK"
  ;
HNDGETPROP(OBJREF,PROPNAME,OUT)    ;"Get a property, putting value into OUT 
  ;"OUT will be passed in REFERENCE.  Results of GET will be merged into OUT
  ;"RESULT: Will return OUT also.  NOTE: if GET is an array, RESULT could be "", but have subnodes
  NEW RESULT SET RESULT="1^Not found"
  KILL OUT
  IF $GET(PROPNAME)'="",$DATA(@OBJREF@("PROP",PROPNAME))>0 DO
  . MERGE OUT=@OBJREF@("PROP",PROPNAME)
  . SET RESULT=$GET(OUT)
  QUIT RESULT
  ;
  ;"======================================================================
  ;" Utilities
  ;"======================================================================
  ;
GETTYPE(TYPENAME,OUTTYPEREF,SCRNW,SCRNH,BUFFREF)  ;
  IF TYPENAME="OBJECT" DO
  . DO INITOBJTYPE^TMGOOW2(OUTTYPEREF,SCRNW,SCRNH,.BUFFREF)  ;"Setup Type array for WIN Obj
  IF TYPENAME="WINDOW" DO
  . DO INITWINTYPE^TMGOOW3(OUTTYPEREF,SCRNW,SCRNH,.BUFFREF)  ;"Setup Type array for WIN Obj
  ELSE  IF TYPENAME="LISTBOX" DO
  . DO INITLBTYPE^TMGOOW4(OUTTYPEREF,SCRNW,SCRNH,.BUFFREF)  ;"Setup Type array for LIST BOX Obj
  ELSE  IF TYPENAME="MEMOBOX" DO
  . DO INITMBTYPE^TMGOOW5(OUTTYPEREF,SCRNW,SCRNH,.BUFFREF)  ;"Setup Type array for MEMO BOX Obj
  QUIT
  ; 
NEWOBJ(OBJREF,PARENTREF,TYPEREF)  ;"Instantiate object -- NO PARAMETERS
  ;"NOTE: NEWOBJ() is for constructors with only core parameters
  ;"      NEWOBJ2() is for constructors also with initial-state parameters
  NEW RESULT SET RESULT=""
  NEW TYPENAME SET TYPENAME=@TYPEREF@("TYPE")
  IF TYPENAME="OBJECT" DO
  . SET RESULT=$$NEWGENOBJ(.OBJREF,.PARENTREF,.TYPEREF)    
  IF TYPENAME="WINDOW" DO
  . SET RESULT=$$NEWWINOBJ^TMGOOW3(.OBJREF,.PARENTREF,.TYPEREF) 
  ELSE  IF TYPENAME="LISTBOX" DO
  . SET RESULT=$$NEWLBOBJ^TMGOOW4(.OBJREF,.PARENTREF,.TYPEREF) 
  ELSE  IF TYPENAME="MEMOBOX" DO
  . SET RESULT=$$NEWMBOBJ^TMGOOW5(.OBJREF,.PARENTREF,.TYPEREF) 
  QUIT RESULT
  ;
NEWOBJ2(OBJREF,PARENTREF,TYPEREF,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10)  ;"Instantiate object, WITH PARAMETERSS
  ;"NOTE: NEWOBJ() is for constructors with only core parameters
  ;"      NEWOBJ2() is for constructors also with initial-state parameters
  NEW RESULT SET RESULT=""
  NEW TYPENAME SET TYPENAME=@TYPEREF@("TYPE")
  IF TYPENAME="OBJECT" DO
  . SET RESULT=$$NEWGENOBJ(.OBJREF,.PARENTREF,.TYPEREF)    
  IF TYPENAME="WINDOW" DO
  . SET RESULT=$$NEWWINOBJ2^TMGOOW3(.OBJREF,.PARENTREF,.TYPEREF,.P1,.P2,.P3,.P4) 
  ELSE  IF TYPENAME="LISTBOX" DO
  . SET RESULT=$$NEWLBOBJ2^TMGOOW4(.OBJREF,.PARENTREF,.TYPEREF,.P1,.P2,.P3,.P4,.P5) 
  ELSE  IF TYPENAME="MEMOBOX" DO
  . SET RESULT=$$NEWMBOBJ2^TMGOOW5(.OBJREF,.PARENTREF,.TYPEREF,.P1,.P2,.P3,.P4,.P5) 
  QUIT RESULT
  ;
ACTION(SELFREF,NAME,PARAM1,PARAM2,PARAM3,PARAM4)  ;"Generic action launcher.  
  NEW EVENTRESULT SET EVENTRESULT="-1^ERROR"  ;"default. 
  IF $GET(SELFREF)="" GOTO EVDN
  SET NAME="ON "_$GET(NAME)
  IF $DATA(@SELFREF@($GET(NAME)))=0 GOTO EVDN
  NEW CODE SET CODE=$GET(@SELFREF@(NAME,"X"))
  IF CODE="" SET CODE=$$PREPCODE(SELFREF,NAME)
  XECUTE CODE  ;"<-- modifies EVENTRESULT
EVDN ;  
  QUIT EVENTRESULT
  ;  
PREPCODE(SELFREF,NAME) ;
  NEW CODE SET CODE=$GET(@SELFREF@(NAME))
  IF CODE="" GOTO PCDN
  NEW PARAMVALS
  NEW PARAMDEF SET PARAMDEF=$PIECE($PIECE(CODE,"(",2),")",1)
  NEW NUMPARAMS SET NUMPARAMS=$SELECT(PARAMDEF="":0,1:$LENGTH(PARAMDEF,","))
  IF NUMPARAMS>4 SET NUMPARAMS=4 ;"limit of 4 parameters for now...
  SET CODE=$PIECE(CODE,"(",1)
  NEW QTSELFREF SET QTSELFREF=$$QTPROTCT^TMGSTUT3(SELFREF)
  SET CODE="SET EVENTRESULT=$$"_CODE_"("""_QTSELFREF_""""   ;"<--- note SELF is always added as a first parameter
  NEW IDX FOR IDX=1:1:NUMPARAMS DO
  . NEW APARAMDEF SET APARAMDEF=$PIECE(PARAMDEF,",",IDX)
  . NEW PARAMNAME SET PARAMNAME="PARAM"_IDX
  . IF $DATA(@PARAMNAME)=0 SET @PARAMNAME=""
  . SET CODE=CODE_",."_PARAMNAME
  SET CODE=CODE_")"
  SET @SELFREF@(NAME,"X")=CODE 
PCDN ;  
  QUIT CODE
  ;
PREPPROPCODE(OBJREF,MODE,NAME) ;  
  ;"MODE -- 'GET' or 'SET'
  NEW CODE,DYNNAME SET DYNNAME="ON DYN PROP "_MODE_": "_NAME
  IF $DATA(@OBJREF@(DYNNAME))=0 SET DYNNAME="ON DYN PROP "_MODE_": GENERIC"
  IF $DATA(@OBJREF@(DYNNAME))=0 GOTO SPDN ;"nothing found for setting...
  SET CODE=$GET(@OBJREF@(DYNNAME,"X"))
  IF CODE="" DO
  . SET CODE=$GET(@OBJREF@(DYNNAME))
  . SET CODE=$$PREPCODE(OBJREF,DYNNAME) QUIT:CODE="" 
  . SET @OBJREF@(DYNNAME,"X")=CODE
  QUIT CODE
  ;
SETPROP(OBJREF,NAME,VALUE)  ;"SET PROPERTY
  NEW EVENTRESULT SET EVENTRESULT="-1^Setter not found"
  NEW CODE SET CODE=$$PREPPROPCODE(OBJREF,"SET",NAME)
  IF CODE="" GOTO SPDN
  NEW PARAM1 SET PARAM1=NAME
  NEW PARAM2 MERGE PARAM2=VALUE
  XECUTE CODE  ;"<-- Acts on PARAM1, PARAM2, returns EVENTRESULT
SPDN ;  
  QUIT EVENTRESULT
  ;
GETPROP(OBJREF,NAME,OUTREF)  ;"SET PROPERTY
  NEW RESULT SET RESULT="-1^Not found"
  NEW CODE SET CODE=$$PREPPROPCODE(OBJREF,"GET",NAME)
  IF CODE="" GOTO GPDN
  NEW EVENTRESULT SET EVENTRESULT=""
  NEW PARAM1 SET PARAM1=NAME
  NEW PARAM2 SET PARAM2=OUTREF
  XECUTE CODE   ;"<-- Acts on PARAM1, PARAM2, returns EVENTRESULT, and PARAM2 is OUT REF parameter
  IF +$GET(EVENTRESULT)=-1 SET RESULT=EVENTRESULT
  ELSE  DO
  . SET RESULT=$GET(@OUTREF)  ;"Result will be top node of OUT
GPDN ;  
  QUIT RESULT
  ;
GETCOLOR(LABEL,COLORSREF,FG,BG) ;
  ;"Purpose: to LOAD color, based on LABEL name, into FG, BG
  ;"Input: LABEL -- the name of the color, i.e. NORM, HIGH, etc.
  ;"              If LABEL=REST, then special ResetTerminal function called.
  ;"       COLORSREF -- PASS BY NAME. Format: @COLORSREF@(SomeName)=CLRVEC24;CLRVEC24
  ;"       FG,BG -- OPTIONAL.  OUT PARAMETERS.  PASS BY REFERENCE to retrieve resulting FG and BG colors.  
  ;"RESULT: Returns COLORPAI: resulting FG^BG colors.
  NEW COLORPAIR
  IF LABEL="RESET" DO  GOTO GCDN
  . SET (FG,BG)=-1   ;"reset colors
  . SET COLORPAIR=FG_"^"_BG
  IF $DATA(@COLORSREF@(LABEL))=0 DO
  . NEW TEMPCOLORS
  . DO SETDEFCOLORS^TMGUSRIF(.TEMPCOLORS)
  . MERGE @COLORSREF=TEMPCOLORS
  SET COLORPAIR=$GET(@COLORSREF@(LABEL))
  DO SPLITCOLORPAIR^TMGUSRI8(COLORPAIR,.FG,.BG)
  IF (FG="")!(BG="") DO
  . SET FG=1,BG=0  ;"default fo black foreground, white background
  . SET COLORPAIR=FG_"^"_BG
GCDN ;  
  QUIT COLORPAIR
  ;      
