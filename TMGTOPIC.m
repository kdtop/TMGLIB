TMGTOPIC ;ELH - Topic Routines; 4/30/2014
	;;1.0;CONSULT/REQUEST TRACKING;2/18/14;Build 7
 ;
 ;"~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
 ;"Copyright (c) 6/23/2015  Kevin S. Toppenberg MD
 ;"
 ;"This file is part of the TMG LIBRARY, and may only be used in accordence
 ;" to license terms outlined in separate file TMGLICNS.m, which should 
 ;" always be distributed with this file.
 ;"~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
 ;
TOPICRPT(ROOT,TMGDFN,ID,ALPHA,OMEGA,DTRANGE,REMOTE,MAX,ORFHIE)  ;"TOPIC REPORT
  ;"Purpose: Entry point, as called from CPRS REPORT system
  ;"Input: ROOT -- Pass by NAME.  This is where output goes
  ;"       TMGDFN -- Patient DFN ; ICN for foriegn sites
  ;"       ID --
  ;"       ALPHA -- Start date (lieu of DTRANGE)
  ;"       OMEGA -- End date (lieu of DTRANGE)
  ;"       DTRANGE -- # days back from today
  ;"       REMOTE --
  ;"       MAX    --
  ;"       ORFHIE -D- 
  goto T1
  SET @ROOT@(1)="<HTML><HEAD><TITLE>TOPIC THREAD REPORT</TITLE></HEAD><BODY>"
  NEW TOPIC SET TOPIC=""
  NEW TOPICARR
  FOR  SET TOPIC=$ORDER(^TMG(22719.2,TMGDFN,1,"B",TOPIC)) QUIT:TOPIC=""  DO
  . NEW TOPICIDX SET TOPICIDX=0
  . FOR  SET TOPICIDX=$ORDER(^TMG(22719.2,TMGDFN,1,"B",TOPIC,TOPICIDX)) QUIT:TOPICIDX'>0  DO
  . . SET TOPICARR($$UP^XLFSTR(TOPIC),TOPICIDX)=""
  ;"
  SET TOPIC=""
  NEW ROOTIDX SET ROOTIDX=1
  SET @ROOT@($I(ROOTIDX))="<TABLE BORDER=3><TR><TH>TOPIC</TH><TH>THREADS</TH></TR>"
  FOR  SET TOPIC=$ORDER(TOPICARR(TOPIC)) QUIT:TOPIC=""  DO
  . SET @ROOT@($I(ROOTIDX))="<TR><TD>"_TOPIC_"</TD><TD><ul>"
  . NEW TOPIDX SET TOPIDX=0
  . FOR  SET TOPIDX=$ORDER(TOPICARR(TOPIC,TOPIDX)) QUIT:TOPIDX'>0  DO
  . . ;"SET @ROOT@($I(ROOTIDX))="threads go here"
  . . NEW THREADIDX SET THREADIDX=0
  . . FOR  SET THREADIDX=$ORDER(^TMG(22719.2,TMGDFN,1,TOPIDX,1,THREADIDX)) QUIT:THREADIDX'>0  DO
  . . . SET @ROOT@($I(ROOTIDX))="<li>"
  . . . SET @ROOT@($I(ROOTIDX))="<B>"_$$EXTDATE^TMGDATE($GET(^TMG(22719.2,TMGDFN,1,TOPIDX,1,THREADIDX,0)),1)_"</B>"
  . . . NEW LINEIDX SET LINEIDX=0                      
  . . . FOR  SET LINEIDX=$ORDER(^TMG(22719.2,TMGDFN,1,TOPIDX,1,THREADIDX,1,LINEIDX)) QUIT:LINEIDX'>0  DO
  . . . . SET @ROOT@($I(ROOTIDX))=$GET(^TMG(22719.2,TMGDFN,1,TOPIDX,1,THREADIDX,1,LINEIDX,0))
  . . . SET @ROOT@($I(ROOTIDX))="<hr></li>"
  . SET @ROOT@($I(ROOTIDX))="</ul></td></tr>"
  QUIT
  ;
  ;
T1  ;"TEST1
  NEW ADFN SET ADFN=TMGDFN
  NEW DATA DO TOPIC2DATA(ADFN,.DATA)
  NEW INFO DO PREPINFO(.DATA,.INFO)
  NEW HTMDOC DO HTMT2DOC^TMGHTM3("HTMDOC","TOPICRPT","TMGHTMS1",.INFO)
  ;"ZWR HTMDOC
  MERGE @ROOT=HTMDOC
  QUIT
  ;
TOPIC2DATA(TMGDFN,DATA)  ;"Prepare working data array of topics
  ;"INPUT: TMGDFN -- patient IEN
  ;"        DATA -- PASS BY REFERENCE.  SEE OUTPUT
  ;"OUTPUT: DATA filled as follows:
  ;"          DATA("TOPIC",<TOPIC_NAME>,<FMDT>,#)=<line of text>
  ;
  NEW TOPIC SET TOPIC=""
  FOR  SET TOPIC=$ORDER(^TMG(22719.2,TMGDFN,1,"B",TOPIC)) QUIT:TOPIC=""  DO
  . NEW TOPICIEN SET TOPICIEN=0
  . FOR  SET TOPICIEN=$ORDER(^TMG(22719.2,TMGDFN,1,"B",TOPIC,TOPICIEN)) QUIT:TOPICIEN'>0  DO
  . . NEW FULLTOPICNAME SET FULLTOPICNAME=$PIECE($GET(^TMG(22719.2,TMGDFN,1,TOPICIEN,0)),"^",1)
  . . NEW ADT SET ADT=0
  . . FOR  SET ADT=$ORDER(^TMG(22719.2,TMGDFN,1,TOPICIEN,1,"B",ADT)) QUIT:ADT'>0  DO
  . . . NEW DTSUBIEN SET DTSUBIEN=0
  . . . FOR  SET DTSUBIEN=$ORDER(^TMG(22719.2,TMGDFN,1,TOPICIEN,1,"B",ADT,DTSUBIEN)) QUIT:DTSUBIEN'>0  DO
  . . . . NEW IDX,ODX SET (IDX,ODX)=0
  . . . . FOR  SET IDX=$ORDER(^TMG(22719.2,TMGDFN,1,TOPICIEN,1,DTSUBIEN,1,IDX)) QUIT:IDX'>0  DO
  . . . . . NEW LINE SET LINE=$GET(^TMG(22719.2,TMGDFN,1,TOPICIEN,1,DTSUBIEN,1,IDX,0))
  . . . . . SET DATA("TOPIC",FULLTOPICNAME,ADT,$INCR(ODX))=LINE
  QUIT
  ;
PREPINFO(DATA,INFO) ;"Take patient data and prepare INFO for insertion into template
  ;"NOTE: This is designed to work with TOPICRPT^TMGHTMS1 as template, and
  ;"      will use HTM2DOC^TMGHTM3 to merge the two. 
  ;"INPUT: DATA -- PASS BY REFERENCE.  Format:
  ;"                  DATA("TOPIC",<TOPIC_NAME>,<FMDT>,#)=<line of text>
  ;"       INFO -- PASS BY REFERENCE.  Format:
  ;"                  INFO("DATA",<block_name>,#)=line of HTML-valid text to put into template
  ;"Result: None.
  NEW ODX SET ODX=0
  ;
  ;"First, create Table of Contents (TOC) block
  SET INFO("DATA","TOC",$INCR(ODX))="<h3>Topics</h3>"
  SET INFO("DATA","TOC",$INCR(ODX))="<ul>"
  NEW ATOPIC SET ATOPIC=""
  NEW TOCIDX SET TOCIDX=0
  FOR  SET ATOPIC=$ORDER(DATA("TOPIC",ATOPIC)) QUIT:ATOPIC=""  DO
  . SET TOCIDX=TOCIDX+1
  . SET INFO("DATA","TOC",$INCR(ODX))="  <li><a href=""#"_TOCIDX_""" onclick=""navigateTo(event, '"_TOCIDX_"')"">"_ATOPIC_"</a></li>"
  SET INFO("DATA","TOC",$INCR(ODX))="</ul>"
  ;
  ;"Next, create TABLE block
  SET INFO("DATA","TABLE",$INCR(ODX))="<table>"
  SET ATOPIC="",TOCIDX=0
  FOR  SET ATOPIC=$ORDER(DATA("TOPIC",ATOPIC)) QUIT:ATOPIC=""  DO
  . SET TOCIDX=TOCIDX+1
  . SET INFO("DATA","TABLE",$INCR(ODX))="  <tr>"
  . SET INFO("DATA","TABLE",$INCR(ODX))="    <th id="""_TOCIDX_""">"_ATOPIC_"</th>"
  . SET INFO("DATA","TABLE",$INCR(ODX))="  </tr>"
  . SET INFO("DATA","TABLE",$INCR(ODX))="  <tr>"
  . SET INFO("DATA","TABLE",$INCR(ODX))="    <td>"
  . NEW NUMDTS SET NUMDTS=$$LISTCT^TMGMISC2($NAME(DATA("TOPIC",ATOPIC)))
  . NEW BULLETS SET BULLETS=(NUMDTS>1)
  . NEW TEXT SET TEXT=""
  . SET INFO("DATA","TABLE",$INCR(ODX))="    <ul>"
  . NEW ADT SET ADT=0
  . FOR  SET ADT=$ORDER(DATA("TOPIC",ATOPIC,ADT)) QUIT:ADT'>0  DO
  . . IF BULLETS SET TEXT=TEXT_"      <li>"
  . . NEW EDT SET EDT=$$FMTE^XLFDT(ADT,"2D")
  . . SET TEXT=TEXT_"<B>"_EDT_":</B> "
  . . NEW IDX SET IDX=0
  . . FOR  SET IDX=$ORDER(DATA("TOPIC",ATOPIC,ADT,IDX)) QUIT:IDX'>0  DO
  . . . NEW LINE SET LINE=$GET(DATA("TOPIC",ATOPIC,ADT,IDX))
  . . . SET TEXT=TEXT_LINE
  . . . SET INFO("DATA","TABLE",$INCR(ODX))=TEXT,TEXT=""
  . SET INFO("DATA","TABLE",$INCR(ODX))="      </ul>"
  . SET INFO("DATA","TABLE",$INCR(ODX))="    </td>"
  . SET INFO("DATA","TABLE",$INCR(ODX))="  </tr>"
  ;
  SET INFO("DATA","TABLE",$INCR(ODX))="</table>"
  QUIT
  ;
TEST
  ZLINK "TMGTEST"
  DO GETCODE(ROOT,"HTMLTEST1","TMGTEST")
  QUIT
  ;
GETCODE(OUTREF,TAG,ROUTINE) ;
  NEW OFFSET
  NEW IDX SET IDX=1
  NEW DONE SET DONE=0
  FOR OFFSET=1:1 DO  QUIT:DONE
  . NEW LINE SET LINE=$TEXT(@TAG+OFFSET^@ROUTINE)
  . SET LINE=$PIECE(LINE,";;",2)
  . IF LINE["DONE_WITH_HTML" SET DONE=1 QUIT
  . SET @OUTREF@($I(IDX))=LINE
  QUIT
  ;  
  ;"========================================================================
  ;"Code for fixing older threads which are full of repeats from prior entries
  ;"========================================================================
TESTFIX ; 
  ;"NEW ADFN SET ADFN=75072
  ;"NEW ADFN SET ADFN=36735  
  ;"NEW ADFN SET ADFN=75071
  NEW ADFN SET ADFN=27475
  KILL ^TMG("TMP","FIX22719.2",ADFN)  ;"Remove record of prior run. 
  DO FIX22719D2(ADFN)
  QUIT
  ;
FIXALL ; 
  NEW STIME SET STIME=$H
  NEW PATCT SET PATCT=0
  NEW ADFN SET ADFN=0
  NEW MAXDFN SET MAXDFN=$ORDER(^DPT("@"),-1)
  FOR  SET ADFN=$ORDER(^DPT(ADFN)) QUIT:ADFN'>0  DO
  . ;"SET PATCT=PATCT+1
  . ;"IF (PATCT#10=1)  DO
  . NEW PATNAME SET PATNAME=$$LJ^XLFSTR($PIECE($GET(^DPT(ADFN,0)),"^",1),22)
  . DO PROGBAR^TMGUSRI2(ADFN,"Checking "_PATNAME,1,MAXDFN,80,STIME)
  . DO FIX22719D2(ADFN) 
  QUIT  
  ;
FIX22719D2(ADFN) ;
  IF $DATA(^TMG("TMP","FIX22719.2",ADFN))>0 GOTO FXDN
  NEW DATA DO TOPIC2DATA^TMGTOPIC(ADFN,.DATA)
  NEW COMPOSITE
  NEW ATOPIC SET ATOPIC=""
  FOR  SET ATOPIC=$ORDER(DATA("TOPIC",ATOPIC)) QUIT:ATOPIC=""  DO
  . NEW TOPICS
  . NEW ADT SET ADT=0
  . FOR  SET ADT=$ORDER(DATA("TOPIC",ATOPIC,ADT)) QUIT:ADT'>0  DO
  . . NEW CURARR MERGE CURARR=DATA("TOPIC",ATOPIC,ADT)
  . . NEW CURSTR SET CURSTR=$$ARR2STR^TMGSTUT2(.CURARR," ")
  . . SET TOPICS(ADT)=CURSTR
  . NEW SAVEDTOPICS MERGE SAVEDTOPICS=TOPICS
  . DO CLEANTOPICS(.TOPICS)
  . NEW ADT SET ADT=0
  . FOR  SET ADT=$ORDER(TOPICS(ADT)) QUIT:ADT'>0  DO
  . . ;" IF $GET(TOPICS(ADT))'=$GET(SAVEDTOPICS(ADT)) DO
  . . ;" . WRITE !,"OLD: [",SAVEDTOPICS(ADT),"]",!
  . . ;" . WRITE "NEW: [",TOPICS(ADT),"]",!
  . . IF $GET(TOPICS(ADT))=$GET(SAVEDTOPICS(ADT)) DO
  . . . KILL TOPICS(ADT)  ;"kill every entry that was not changed.      
  . MERGE COMPOSITE(ATOPIC)=TOPICS
  DO SAVECHANGES(.COMPOSITE,ADFN,.ERRARR)
  IF $DATA(ERRARR)=0 DO
  . SET ^TMG("TMP","FIX22719.2",ADFN)=$$NOW^XLFDT
  ELSE  DO
  . WRITE ! ZWR ERRARR
FXDN ;  
  QUIT
  ;
SAVECHANGES(ARR,ADFN,ERROUT)  ;
  ;"NOTE: FILE1B^TMGTIUT5 is where data was initially filed as part of post-sig code.
  ;"INPUT: ARR -- PASS BY REFERENCE.  Array as created by FIX22719D2(ADFN).  Format:
  ;"            ARR(FMDT)=<text for filing>  or "" if entry needs to be deleted
  ;"       ADFN -- PATIENT IEN
  ;"       ERROUT -- PASS BY REFERENCE.  Format:
  ;"            ERROUT(FMDT)=<ERROR MESSAGE>
  NEW IEN SET IEN=+$GET(ADFN)  ;"records are DINUM'd with patient IEN, so IEN22719D2=DFN
  NEW ATOPIC SET ATOPIC=""
  FOR  SET ATOPIC=$ORDER(ARR(ATOPIC)) QUIT:ATOPIC=""  DO
  . NEW SUBIEN SET SUBIEN=0
  . FOR  SET SUBIEN=$ORDER(^TMG(22719.2,IEN,1,"B",$EXTRACT(ATOPIC,1,30),SUBIEN)) QUIT:SUBIEN'>0  DO
  . . NEW THISTOPIC SET THISTOPIC=$PIECE($GET(^TMG(22719.2,IEN,1,SUBIEN,0)),"^",1)
  . . IF THISTOPIC'=ATOPIC QUIT  
  . . NEW ADT SET ADT=0
  . . FOR  SET ADT=$ORDER(ARR(ATOPIC,ADT)) QUIT:ADT'>0  DO
  . . . NEW SUBSUBIEN SET SUBSUBIEN=$ORDER(^TMG(22719.2,IEN,1,SUBIEN,1,"B",ADT,0)) QUIT:SUBSUBIEN'>0
  . . . NEW TMGIENS SET TMGIENS=SUBSUBIEN_","_SUBIEN_","_IEN_","
  . . . NEW TMGFDA,TMGMSG,TMGIEN
  . . . NEW LINE SET LINE=$GET(ARR(ATOPIC,ADT))
  . . . IF LINE="" DO  
  . . . . SET TMGFDA(22719.211,TMGIENS,.01)="@"  ;"delete empty record
  . . . . DO FILE^DIE("E","TMGFDA","TMGMSG")
  . . . ELSE  DO
  . . . . NEW TMGWP DO STR2WP^TMGSTUT2(LINE,"TMGWP",75) IF $DATA(TMGWP)=0 QUIT
  . . . . DO WP^DIE(22719.211,TMGIENS,1,"","TMGWP","TMGMSG")
  . . . IF $DATA(TMGMSG("DIERR")) DO  QUIT
  . . . . SET ERROUT(ADT)=$$GETERRST^TMGDEBU2(.TMGMSG)
  QUIT
  ;  
CLEANTOPICS(TOPICS)  ;
  NEW DIVS SET DIVS=" ,;:.!?-"
  NEW ADTLATER SET ADTLATER=""
  FOR  SET ADTLATER=$ORDER(TOPICS(ADTLATER),-1) QUIT:ADTLATER'>0  DO                                
  . NEW CURARR,CURTEXT SET CURTEXT=$GET(TOPICS(ADTLATER)) QUIT:CURTEXT=""
  . NEW ADTEARLIER SET ADTEARLIER=ADTLATER
  . NEW PRIORCT,MAXPRIOR SET PRIORCT=0,MAXPRIOR=999  ;"<-- If MAXPRIOR=1, then only 1 prior note (the one JUST PRIOR) will be tested  
  . FOR  SET ADTEARLIER=$ORDER(TOPICS(ADTEARLIER),-1) QUIT:(ADTEARLIER'>0)!(PRIORCT>=MAXPRIOR)  DO
  . . SET PRIORCT=PRIORCT+1
  . . NEW PRIORARR,PRIORTEXT SET PRIORTEXT=$GET(TOPICS(ADTEARLIER)) QUIT:PRIORTEXT=""
  . . NEW MATCHES DO SUBSTRMATCH^TMGSTUT3(PRIORTEXT,CURTEXT,.MATCHES,.PRIORARR,.CURARR)
  . . NEW HASMATCH FOR  DO  QUIT:HASMATCH=0
  . . . SET HASMATCH=0
  . . . NEW ALEN SET ALEN=+$ORDER(MATCHES("LENIDX",""),-1) QUIT:ALEN'>0  
  . . . NEW MATCHIDX SET MATCHIDX=$ORDER(MATCHES("LENIDX",ALEN,0)) QUIT:MATCHIDX'>0
  . . . NEW AMATCH SET AMATCH=$GET(MATCHES(MATCHIDX)) QUIT:AMATCH=""
  . . . NEW MATCHLEN SET MATCHLEN=$PIECE(AMATCH,"^",3) QUIT:(MATCHLEN<=2)
  . . . SET HASMATCH=1 
  . . . NEW STARTPOS SET STARTPOS=+AMATCH
  . . . NEW LEN SET LEN=+$PIECE(AMATCH,"^",2)
  . . . NEW ENDPOS SET ENDPOS=+$PIECE(AMATCH,"^",4)
  . . . NEW PARTA SET PARTA=""
  . . . IF STARTPOS>0 SET PARTA=$EXTRACT(CURTEXT,1,STARTPOS-1)
  . . . NEW PARTB SET PARTB=$EXTRACT(CURTEXT,STARTPOS,ENDPOS)
  . . . NEW PARTC SET PARTC=""
  . . . IF LEN>0 SET PARTC=$EXTRACT(CURTEXT,ENDPOS+1,$LENGTH(CURTEXT))
  . . . SET CURTEXT=$SELECT(PARTA'="":PARTA_"...",1:"")_PARTC
  . . . NEW SCANPOS,SCANDONE SET SCANPOS=1,SCANDONE=0
  . . . FOR SCANPOS=1:1:$LENGTH(CURTEXT) DO  QUIT:SCANDONE
  . . . . NEW CH SET CH=$EXTRACT(CURTEXT,SCANPOS)
  . . . . SET SCANDONE=(((DIVS[CH)=0)&(CH'=""))
  . . . IF SCANPOS>1 DO
  . . . . IF SCANDONE=0 SET CURTEXT="" QUIT   ;"never found a non-div char.  
  . . . . SET CURTEXT=$EXTRACT(CURTEXT,SCANPOS,$LENGTH(CURTEXT))
  . . . SET TOPICS(ADTLATER)=CURTEXT
  . . . KILL CURARR,MATCHES 
  . . . DO SUBSTRMATCH^TMGSTUT3(PRIORTEXT,CURTEXT,.MATCHES,.PRIORARR,.CURARR)  
  NEW JUSTDATES,ADT SET ADT=0
  FOR  SET ADT=$ORDER(TOPICS(ADT)) QUIT:ADT'>0  SET JUSTDATES(ADT\1)=""
  SET ADT=0 FOR  SET ADT=$ORDER(TOPICS(ADT)) QUIT:ADT'>0  DO
  . NEW CURARR,CURTEXT SET CURTEXT=$GET(TOPICS(ADT))
  . IF CURTEXT="" QUIT
  . NEW DONE SET DONE=0
  . FOR  DO  QUIT:DONE
  . . NEW CH SET CH=$EXTRACT(CURTEXT,1) 
  . . IF $ASCII(CH)=-1 SET DONE=1 QUIT
  . . IF DIVS'[CH SET DONE=1 QUIT
  . . SET CURTEXT=$EXTRACT(CURTEXT,2,$LENGTH(CURTEXT))
  . SET CURTEXT=$$STRIPTAG^TMGHTM1(CURTEXT)
  . IF $$REPLSTR^TMGSTUT3(.CURTEXT,"<<-AND->>","...")  ;"ignore result
  . IF $$REPLSTR^TMGSTUT3(.CURTEXT,"... ...","...")  ;"ignore result
  . IF $$REPLSTR^TMGSTUT3(.CURTEXT,".....","...")  ;"ignore result
  . IF $$REPLSTR^TMGSTUT3(.CURTEXT,"....","...")  ;"ignore result
  . IF $$REPLSTR^TMGSTUT3(.CURTEXT,"...  ","... ")  ;"ignore result
  . NEW POSINFO DO SCANDATES^TMGSTUT3(CURTEXT,.POSINFO)
  . NEW IDX SET IDX=$ORDER(POSINFO(""),-1)
  . NEW CHECKEND SET CHECKEND=1
  . NEW DONE SET DONE=0
  . IF IDX>0 FOR  DO  QUIT:DONE  DO   ;"Work from end of string to the beginning, so earlier POS's do change
  . . SET DONE=1  ;"default, will change below if OK
  . . NEW CURLEN SET CURLEN=$LENGTH(CURTEXT)
  . . NEW LATERENTRY SET LATERENTRY=POSINFO(IDX) QUIT:LATERENTRY=""
  . . NEW LATERSTART SET LATERSTART=$PIECE(LATERENTRY,"^",1)
  . . NEW LATEREND SET LATEREND=$PIECE(LATERENTRY,"^",2)
  . . IF CHECKEND DO  ;"Check if any meaningful text occurs after LAST date
  . . . SET CHECKEND=0
  . . . NEW LATERDT SET LATERDT=$PIECE(LATERENTRY,"^",3)
  . . . SET LATERDT=$$INTDATE^TMGDATE(LATERDT)
  . . . IF $DATA(JUSTDATES(LATERDT))=0 QUIT  ;"Only cut out dates that reporesent VISIT DATES
  . . . NEW POST SET POST=$EXTRACT(CURTEXT,LATEREND+1,CURLEN)
  . . . SET POST=$TRANSLATE(POST,". ","")
  . . . IF POST'="" QUIT
  . . . SET CURTEXT=$EXTRACT(CURTEXT,1,LATERSTART-1)
  . . NEW PRIORIDX SET PRIORIDX=$ORDER(POSINFO(IDX),-1) QUIT:PRIORIDX=""  ;"If only 1 entry, will drop out. 
  . . NEW PRIORENTRY SET PRIORENTRY=POSINFO(PRIORIDX) QUIT:PRIORENTRY=""
  . . NEW PRIOREND SET PRIOREND=$PIECE(PRIORENTRY,"^",2)
  . . NEW PRIORSTART SET PRIORSTART=$PIECE(PRIORENTRY,"^",1)
  . . ;"Get text BETWEEN dates.  
  . . NEW BETWEEN SET BETWEEN=$EXTRACT(CURTEXT,PRIOREND+1,LATERSTART-1)
  . . SET BETWEEN=$TRANSLATE(BETWEEN,". ","")
  . . IF BETWEEN'="" DO  QUIT
  . . . SET IDX=PRIORIDX,DONE=0
  . . NEW PARTA SET PARTA=$EXTRACT(CURTEXT,1,PRIORSTART-1)
  . . NEW PARTB SET PARTB=$EXTRACT(CURTEXT,LATERSTART,$LENGTH(CURTEXT))
  . . KILL POSINFO(PRIORIDX)
  . . SET CURTEXT=PARTA_" "_PARTB
  . . NEW TRIMLEN SET TRIMLEN=CURLEN-$LENGTH(CURTEXT)
  . . SET LATERSTART=LATERSTART-TRIMLEN,LATEREND=LATEREND-TRIMLEN
  . . SET $PIECE(LATERENTRY,"^",1,2)=LATERSTART_"^"_LATEREND
  . . SET POSINFO(IDX)=LATERENTRY
  . . SET DONE=0  ;"loop again
  . IF $$REPLSTR^TMGSTUT3(.CURTEXT,"  "," ")  ;"ignore result
  . SET TOPICS(ADT)=$$TRIM^XLFSTR(CURTEXT)
  QUIT
  ;
  ;"========================================================================
  ;"END OF Code for fixing older threads, which will all repeats of full paragraph
  ;"========================================================================

  
    
